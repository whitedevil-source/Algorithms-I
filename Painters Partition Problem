/*
n boards of different lengths to be allocated to m painters
A painter paints 1 unit of board in 1 unit of time and each painter will
paint consecutive boards. We need to find minimum time by which all boards will be painted.
*/

int findFeasible(int boards[], int n, int limit) {
    int sum = 0, painters = 1;
    for (int i = 0; i < n; i++) {
        sum += boards[i];
        if (sum > limit) {
            sum = boards[i];
            painters++;
        }
    }
    return painters;
}

int painterPartition(int boards[], int n, int m) {
    int totalLength = 0, k = 0;
    for (int i = 0; i < n; i++) {
        k = max(k, boards[i]);
        totalLength += boards[i];
    }
    int low = k, high = totalLength;
    while (low < high) {
        int mid = (low + high) / 2;
        int painters = findFeasible(boards, n, mid);
        if (painters <= m) {
            high = mid;
        }
        else {
            low = mid - 1;
        }
    }
    return low;
}
