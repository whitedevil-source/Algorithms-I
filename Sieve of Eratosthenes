//Sieve of Eratosthenes
void primesieve(int n) {
    int prime[100] = { 0 };
    for (int i = 2; i <= n; i++) {
        if (prime[i] == 0) {
            for (int j = i * i; j <= n; j += i) {
                prime[j] = 1;
            }
        }
    }
    for (int i = 2; i <= n; i++) {
        if (prime[i] == 0) {
            cout << i << " ";
        }
    }
}

//prime factorization using sieve
//spf[i]->smallest prime factor of i
/*
while(n!=1)
  print spf[n]
  n=n/spf[n]
*/
void primefactor(int n) {
    int spf[100] = { 0 };
    for (int i = 2; i <= n; i++) {
        spf[i] = i;
    }
    for (int i = 2; i <= n; i++) {
        if (spf[i] == i) {
            for (int j = i * i; j <= n; j++) {
                spf[j] = i;
            }
        }
    }
    while (n != 1) {
        cout << spf[n] << " ";
        n = n / spf[n];
    }
}
