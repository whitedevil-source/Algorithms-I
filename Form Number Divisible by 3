/*
For a given array and an integer K check if any subarray of size K
exists in the array such that elements in the subarray form a number 
divisible by 3
*/

void computeNumberFromSubarray(vector<int> arr, int k) {
    pair<int, int> ans;
    int sum = 0;
    for (int i = 0; i < k; i++) {
        sum += arr[i];
    }
    bool found = false;
    if (sum % 3 == 0) {
        ans = make_pair(0, k - 1);
        found = true;
    }
    for (int j = k; j < arr.size(); j++) {
        if (found) {
            break;
        }
        sum += (arr[j] - arr[j - k]);
        if (sum % 3 == 0) {
            ans = make_pair(j - k + 1, j);
            found = true;
        }
    }
    if (!found) {
        ans = make_pair(-1, 0);
    }
    if (ans.first == -1) {
        cout << "Not found" << endl;
    }
    else {
        for (int i = ans.first; i <= ans.second; i++) {
            cout << arr[i] << ' ';
        }
        cout << endl;
    }
}
