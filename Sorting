//Merge Sort
void merge(int arr[], int l, int mid, int r) {
    int n1 = mid - l + 1;
    int n2 = r - mid;
    int *a=new int(n1);
    int *b=new int(n2); //temp arrays
    for (int i = 0; i < n1; i++) {
        a[i] = arr[l + i];
    }
    for (int i = 0; i < n2; i++) {
        b[i] = arr[mid + 1 + i];
    }
    int i = 0;
    int j = 0;
    int k = l;
    while (i < n1 && j < n2) {
        if (a[i] < b[j]) {
            arr[k] = a[i];
            k++; i++;
        }
        else {
            arr[k] = b[j];
            k++; j++;
        }
    }
    while (i < n1) {
        arr[k] = a[i];
        k++; i++;
    }
    while (j < n2) {
        arr[k] = b[j];
        k++; j++;
    }
}
void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int mid = (l + r) / 2;
        mergeSort(arr, l, mid);
        mergeSort(arr, mid + 1, r);
        merge(arr, l, mid, r);
    }
}
/*
Time complexity of merge sort:
recurrence relation=> T(n)=2T(n/2)+n
levels;k=Log(n)
So complexity is O(nLog(n))
*/

//Quick Sort (divide and conquer algo)
int partition(int arr[], int l, int r) {
    int pivot = arr[r];
    int i = l - 1;
    for (int j = l; j < r; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr, i, j);
        }
    }
    swap(arr, i + 1, r);
    return i + 1;
}
void quickSort(int arr[], int l, int r) {
    if (l < r) {
        int pi = partition(arr, l, r);
        quickSort(arr, l, pi - 1);
        quickSort(arr, pi + 1, r);
    }
}
/*
Time complexity of quicksort:
depends on pivot:
in best case pivot is median element
in worst case pivot could be end element
recurrence: T(n)=2T(n/2)+n
using master theorem we get O(nLog(n)) in best case
and in worst case it can be O(n^2)
*/

//Count Sort
//find the count of every distinct element and calculateits position in sorted array
void countSort(int arr[], int n) {
    int k = arr[0];
    for (int i = 0; i < n; i++) {
        k = max(k, arr[i]);
    }
    int count[10] = { 0 };
    for (int i = 0; i < n; i++) {
        count[arr[i]]++;
    }
    for (int i = 1; i <= k; i++) {
        count[i] += count[i - 1];
    }
    int *output=new int(n);
    for (int i = n - 1; i >= 0; i--) {
        output[--count[arr[i]]] = arr[i];
    }
    for (int i = 0; i < n; i++) {
        arr[i] = output[i];
    }
}
/*
* counting sort complexity:
* array creation of required range= O(max(A))
* Fill the frequencies of each element =O(N)
* iteration : O(max(A))
* complexity: O(max(N,max(A)))
*/

//DNF Sort
/*
* check value of arr[mid]
* if 0 swap arr[low] and arr[mid], low++,mid++
* if 1 mid++
* if 2 swap arr[mid] and arr[high], high--
*/
void swap(int arr[], int i, int j) {
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}
void dnfSort(int arr[], int n) {
    int low = 0; int mid = 0; int high = n - 1;
    while (mid <= high) {
        if (arr[mid] == 0) {
            swap(arr, low, mid);
            low++; mid++;
        }
        else if (arr[mid] == 1) mid++;
        else {
            swap(arr, mid, high); high--;
        }
    }
}
/*
* Time complexity: O(N)
*/

// Wave Sort
// Sort in a fashion: a[0]>=a[1]<=a[2]>=a[3]<=a[4]...
void wavesort(int arr[], int n) {
    for (int i = 1; i < n; i += 2) {
        if (arr[i] > arr[i - 1]) swap(arr, i, i - 1);
        if (arr[i] > arr[i + 1] && i <= n - 2) swap(arr, i, i + 1);
    }
}
//Time complexity is O(N)

//Count Inversions
//two elements form an inversion if a[i]>a[j] and i<j
//merge sort approach
long long merger(int arr[], int l, int mid, int r) {
    long long inv = 0;
    int n1 = mid - l + 1;
    int n2 = r - mid;
    int *a=new int(n1); int *b=new int(n2);
    for (int i = 0; i < n1; i++) {
        a[i] = arr[l + i];
    }
    for (int i = 0; i < n2; i++) {
        b[i] = arr[mid + i + 1];
    }
    int i = 0, j = 0, k = l;
    while (i < n1 and j < n2) {
        if (a[i] <= b[j]) {
            arr[k] = a[i];
            k++; i++;
        }
        else {
            arr[k] = b[j];
            inv += n1 - i;
            k++; j++;
        }
    }
    while (i < n1) {
        arr[k] = a[i];
        k++; i++;
    }
    while (j < n2) {
        arr[k] = b[j];
        inv += n1 - i;
        k++; j++;
    }
    return inv;
}
long long mergesort(int arr[], int l, int r) {
    long long inv = 0;
    if (l < r) {
        int mid = (l + r) / 2;
        inv += mergesort(arr, l, mid);
        inv += mergesort(arr, mid + 1, r);
        inv += merger(arr, l, mid, r);
    }
    return inv;
}
