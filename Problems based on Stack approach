#include<iostream>
#include<algorithm>
#include<vector>
#include<sstream>
#include<stack>
#include<queue>
#include<deque>
#include<cmath>
#include<iomanip>
#include<set>
#include<map>
#include<utility>


using namespace std;

#define ll long long
#define pb push_back
#define pll pair<ll,ll> 
#define mll map<ll,ll>
#define pii pair<int,int>
#define vpii vector<pii>
#define rep(i,n) for(int i=0; i<n; i++)
#define All(x,v) for(auto x:v)
#define arrin(a,n) ll a[n]; rep(i,n) cin>>a[i]
#define vi vector<int>
#define vll vector<ll>
#define nl "\n"
#define print(arr) All(x,arr) cout<<x<<" "; cout<<nl
#define sz(x) (int)x.size()
#define all(v) v.begin(),v.end()
#define ing(m,ad) rep(i,m){ int u,v; cin>>u>>v; u--;v--; ad[u].pb(v); ad[v].pb(u);}
#define vdsort(v) sort(v.begin(),v.end(),greater<int>())
#define F first
#define S second
#define mod 1'000'000'007
const int MAXN = 100'005;
int spf[MAXN];
ll fac1[MAXN], fac2[MAXN], inv[MAXN];
ll gcd(ll x, ll y) { return y ? gcd(y, x % y) : x; }

template <typename C, typename T = std::decay_t<decltype(*begin(std::declval<C>()))>, typename std::enable_if<!std::is_same<C, std::string>::value>::type* = nullptr>
std::ostream& operator<<(std::ostream& os, const C& container)
{
    bool first = true;
    std::stringstream ss;
    ss << '[';
    for (const auto& x : container)
    {
        if (!first)
        {
            ss << ", ";
        }
        first = false;
        ss << x;
    }
    ss << ']';
    return os << ss.str();
}
template <class T1, class T2>
std::ostream& operator<<(std::ostream& os, const std::pair<T1, T2>& p)
{
    os << '{' << p.first << ", " << p.second << '}';
    return os;
}
vector<string> vec_splitter(string S)
{
    S += ',';
    vector<string> res;
    while (!S.empty())
    {
        res.push_back(S.substr(0, S.find(',')));
        S = S.substr(S.find(',') + 1);
    }
    return res;
}

template <typename Head, typename... Tail>
void debug_out(vector<string> args, int idx, int LINE_NUM, Head H, Tail... T)
{
    if (idx > 0)
        cerr << ", ";
    else
        cerr << "Line(" << LINE_NUM << ") ";
    stringstream ss;
    ss << H;
    cerr << args[idx] << " = " << ss.str();
    debug_out(args, idx + 1, LINE_NUM, T...);
}
#ifdef DEBUG
#define debug(...) debug_out(vec_splitter(#__VA_ARGS__), 0, __LINE__, __VA_ARGS__)
#else
#define debug(...) 42
#endif

void sieve() {
    spf[1] = 1;
    for (int i = 2; i < MAXN; i++)  spf[i] = i;
    for (int i = 4; i < MAXN; i += 2) spf[i] = 2;
    for (int i = 3; i * i < MAXN; i++) {
        if (spf[i] == i)
            for (int j = i * i; j < MAXN; j += i)
                if (spf[j] == j)  spf[j] = i;
    }
}
vector<int> getFactorization(int x) {
    vector<int> ret;
    while (x != 1) {
        ret.push_back(spf[x]);
        x = x / spf[x];
    }
    return ret;
}

ll exp(ll n, ll m) {
    ll a = 1;
    while (m) {
        if (m & 1) a = (a * n % mod) % mod;
        m /= 2;
        n = (n * n) % mod;
    }
    return a;
}

void pre() {
    fac1[0] = fac2[0] = inv[1] = 1;
    for (int i = 1; i < MAXN; i++) {
        fac1[i] = (fac1[i - 1] * i) % mod;
        if (i > 1) inv[i] = (mod - ((ll)(mod / i) * inv[mod % i]) % mod) % mod;
    }
    for (int i = 1; i < MAXN; i++) fac2[i] = (fac2[i - 1] * inv[i]) % mod;
}
ll C(int n, int k) {
    if (n < k) return 0;
    return ((fac1[n] * fac2[n - k] % mod) * fac2[k] % mod);
}
class Person {
private:
    string name;
    int age;
    float height;
public:
    Person()
    {
        name = "Rocky";
        age = 21;
        height = 170.0;
    }
    Person(string n, int a, float h)
    {
        name = n;
        age = a;
        height = h;
    }
    Person(Person &ob)
    {
        name = ob.name;
        age = ob.age;
        height = ob.height;
    }
    void getdata();
};
void Person::getdata()
{
    cout << endl << name;
    cout << endl << age;
    cout << endl << height;
}
class increase
{
private:
    int num;
public:
    increase(int n = 0)
    {
        num = n;
    }
    void operator++()
    {
        ++num;
    }
    void operator++(int)
    {
        num++;
    }
    void Printer()
    {
        cout << endl << "number is" << num;
    }
};

//Largest Rectangle in a histogram
// optimized approach via stack
int get_max_area(vi a) {
    int n = a.size(), ans = 0, i = 0;
    stack<int> st;
    a.push_back(0);
    while (i < n) {
        while (!st.empty() && a[st.top()] > a[i]) {
            int t = st.top();
            int h = a[t];
            st.pop();
            if (st.empty()) ans = max(ans, h * i);
            else {
                int len = i - st.top() - 1;
                ans = max(ans, h * len);
            }
        }
        st.push(i);
        i++;
    }
}

//Rainwater Harvesting
int rainwater(vi a) {
    stack<int> st;
    int n = a.size(), ans = 0;
    rep(i, n) {
        while (!st.empty() and a[st.top()] < a[i]) {
            int cur = st.top();
            st.pop();
            if (st.empty()) {
                break;
            }
            int diff = i - st.top() - 1;
            ans += (min(a[st.top()],a[i]) - a[cur]) * diff;
        }
        st.push(i);
    }
    return ans;
}

//Stock Span problem
//Stack approach
vi stockspan(vi prices) {
    vi ans;
    stack<pii> s;
    for (auto price : prices) {
        int days = 1;
        while (!s.empty() && s.top().first <= price) {
            days += s.top().second;
            s.pop();
        }
        s.push({ price,days });
        ans.push_back(days);
    }
    return ans;
}

#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);

    int n, k; cin >> n >> k;
    vi a(n);
    for (auto& i : a) cin >> i;
    //Sliding window maximum using Deque
    deque<int> q;
    vi ans;
    rep(i, k) {
        while (!q.empty() && a[q.back()] < a[i]) {
            q.pop_back();
        }
        q.pb(i);
    }
    ans.push_back(a[q.front()]);
    for (int i = k; i < n; i++) {
        if (q.front() == i - k) q.pop_front();
        while (!q.empty() && a[q.back()] < a[i]) {
            q.pop_back();
        }
        q.push_back(i);
        ans.push_back(a[q.front()]);
    }
    for (auto i : ans) cout << i << " ";

    string s; cin >> s;
    stack<char> st;
    bool ans1 = false;
    for (int i = 0; i < s.size(); i++) {
        if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/') {
            st.push(s[i]);
        }
        else if (s[i] == '(') {
            st.push(s[i]);
        }
        else if(s[i]==')'){
            if (st.top() == '(') ans = true;
            while (st.top() == '+' || st.top()=='-' || st.top()=='*' || st.top()=='/') {
                st.pop();
            }
            st.pop();
        }
    }
    cout << ans1;

    return 0;
}
