//RECURSION ALGOS
//check if array is sorted or not
//logic: if arr[0] < arr[1] and arr(1...n) is sorted
bool sorted(int arr[], int n) {
    if (n == 1) {
        return true;
    }
    bool restArray = sorted(arr + 1, n - 1);
    return (arr[0] < arr[1] && restArray);
}

//find first and last occurence of number in array
int firstocc(int arr[], int n, int i, int key) {
    if (i == n) return -1;
    if (arr[i] == key) {
        return i;
    }
    return firstocc(arr, n, i + 1, key);
}
int lastocc(int arr[], int n, int i, int key) {
    int restArray = lastocc(arr, n, i + 1, key);
    if (restArray != -1) {
        return restArray;
    }
    if (arr[i] = key) {
        return i;
    }
    return -1;
}

//Reverse a string using recursion
void reverse(string s) {
    if (s.length() == 0) {
        return; //base case
    }
    string ros = s.substr(1);
    reverse(ros);
    cout << s[0];
}
//replace pi with 3.14 in string
void replacePi(string s) {
    if (s.length() == 0) {
        return; //base case
    }
    if (s[0] == 'p' && s[1] == 'i') {
        cout << "3.14";
        replacePi(s.substr(2));
    }
    else {
        cout << s[0];
        replacePi(s.substr(1));
    }
}

//Tower of Hanoi
void towerofHanoi(int n, char src, char dest, char helper) {
    if(n==0) return //base case
    towerofHanoi(n - 1, src, helper, dest);
    cout << "Move from " << src << " to " << dest << endl;
    towerofHanoi(n - 1, helper, dest, src);
}

//remove all duplicates from string
string removeDup(string s) {
    if (s.length() == 0) {
        return "";
    }
    char ch = s[0];
    string ans = removeDup(s.substr(1));
    if (ch == ans[0]) return ans;
    return (ch + ans); //otherwise
}

//Move all x to the end of the string
string moveallx(string s) {
    if (s.length() == 0) {
        return "";
    }
    char ch = s[0];
    string ans = moveallx(s.substr(1));
    if (ch == 'x') {
        return ans + ch;
    }
    return ch + ans;
}

//generate all substrings of string
void subseq1(string s, string ans) {
    if (s.length() == 0) {
        cout << ans << endl;
        return;
    }
    char ch = s[0];
    string ros = s.substr(1);
    subseq1(ros, ans);
    subseq1(ros, ans + ch);
}

//generate substrings with ASCII number
void subseq2(string s, string ans) {
    if (s.length() == 0) {
        cout << ans << endl;
        return;
    }
    char ch = s[0];
    int code = ch;
    string ros = s.substr(1);
    subseq2(ros, ans);
    subseq2(ros, ans + ch);
    subseq2(ros, ans + to_string(code));
}

//print all possible words from phone digits
string keypadArr[] = {"", "","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz" };
void keypad(string s, string ans) {
    if (s.length() == 0) {
        cout << ans << endl;
        return;
    }
    char ch = s[0];
    string code = keypadArr[ch - '0'];
    string ros = s.substr(1);

    for (int i = 0; i < code.length(); i++) {
        keypad(ros, ans + code[i]);
    }
}

//print all possible permutations of a string
void permutation(string s, string ans) {
    if (s.length() == 0) {
        cout << ans << endl;
        return;
    }
    for (int i = 0; i < s.length(); i++) {
        char ch = s[i];
        string ros = s.substr(0, i) + s.substr(i + 1);
        permutation(ros, ans + ch);
    }
}
//count the number of paths possible from start point to end point in linear gameboard
//maxjump possible is 6
int countpath(int s, int e) {
    if (s == e) {
        return 1;
    }
    if (s > e) {
        return 0;
    }
    int count = 0;
    for (int i = 1; i <= 6; i++) {
        count += countpath(s + i, e);
    }
    return count;
}

//count the number of paths possible in a maze
int countPathMAze(int n, int i, int j) {
    if (i == n - 1 && j == n - 1) {
        return 1;
    }
    if (i >= n || j >= n) return 0;
    return countPathMAze(n, i + 1, j) + countPathMAze(n, i, j + 1);
}

//Tiling problem: Given a "2xn" board and tiles of size "2x1", count
//the number of ways to tile the given board using these tiles
int tilingWays(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;
    return tilingWays(n - 1) + tilingWays(n - 2);
}

//Friends pairing problem: Find the number of ways
//in which n friends can remain single or can be paired up
int friendsPairing(int n) {
    if (n == 0 || n == 1 || n == 2) {
        return n;
    }
    return friendsPairing(n - 1) + friendsPairing(n - 2) * (n - 1);
}

//0-1 Knapsack problem
int knapsack(int value[], int wt[], int n, int W) {
    if (n == 0 || W == 0) return 0;
    if (wt[n - 1] > W) return knapsack(value, wt, n - 1, W);
    return max(knapsack(value, wt, n - 1, W - wt[n - 1]) + value[n - 1], knapsack(value, wt, n - 1, W));
}
