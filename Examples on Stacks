//Reverse a sentence using stack
void reverseSentence(string s) {
    stack<string> st;
    for (int i = 0; i < s.length(); i++) {
        string word = "";
        while (s[i] != ' ' && i < s.length()) {
            word += s[i];
            i++;
        }
        st.push(word);
    }
    while (!st.empty()) {
        cout << st.top() << " ";
        st.pop();
    }cout << endl;
}

//Reverse a stack without using extra stack
void insertAtBottom(stack<int>& st, int ele) {
    if (st.empty()) {
        st.push(ele);
        return;
    }
    int topele = st.top();
    st.pop();
    insertAtBottom(st, ele);
}
void reverse(stack<int>& st) {
    if (st.empty()) return;
    int ele = st.top();
    st.pop();
    reverse(st);
    insertAtBottom(st, ele);
}

//Prefix expression evaluation
int prefixEvaluation(string s) {
    stack<int> st;
    for (int i = s.length() - 1; i >= 0; i--) {
        if (s[i] >= '0' && s[i] <= '9') {
            st.push(s[i] - '0');
        }
        else {
            int op1 = st.top();
            st.pop();
            int op2 = st.top();
            st.pop();
            switch (s[i]) {
            case '+':
                st.push(op1 + op2);
                break;
            case '-':
                st.push(op1 - op2);
                break;
            case '*':
                st.push(op1 * op2);
                break;
            case '/':
                st.push(op1 / op2);
                break;
            case '^':
                st.push(pow(op1,op2));
                break;
            default:
                break;
            }
        }
    }
    return st.top();
}

//Postfix expression evaluation
int postfixEvaluation(string s) {
    stack<int> st;
    for (int i = 0; i < s.length(); i++) {
        if (s[i] >= '0' && s[i] <= '9') {
            st.push(s[i] - '0');
        }
        else {
            int op2 = st.top();
            st.pop();
            int op1 = st.top();
            st.pop();
            switch (s[i]) {
            case '+':
                st.push(op1 + op2);
                break;
            case '-':
                st.push(op1 - op2);
                break;
            case '*':
                st.push(op1 * op2);
                break;
            case '/':
                st.push(op1 / op2);
                break;
            case '^':
                st.push(pow(op1, op2));
                break;
            default:
                break;
            }
        }
    }
    return st.top();
}

//Infix to Postfix
/*
* if operand: print
* if '(' :push to stack
* if ')' :pop from stack and print until '(' is found
* if operator : pop from stack and print until an operator
* with less precedence is found
*/
int prec(char c) {
    if (c == '^') return 3;
    else if (c == '*' || c == '/') return 2;
    else if (c == '+' || c == '-') return 1;
    else return -1;
}
string infixtoPostfix(string s) {
    stack<char> st;
    string res;
    for (int i = 0; i < s.length(); i++) {
        if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {
            res += s[i];
        }
        else if (s[i] == '(') st.push(s[i]);
        else if (s[i] == ')') {
            while (!st.empty() && st.top() != '(') {
                res += st.top();
                st.pop();
            }
            if (!st.empty()) st.pop();
        }
        else {
            while (!st.empty() && prec(st.top()) > prec(s[i])) {
                res += st.top();
                st.pop();
            }
            st.push(s[i]);
        }
    }
    while (!st.empty()) {
        res += st.top();
        st.pop();
    }
    return res;
}

//Infix to Prefix
// trick: reverse the expression
// then traverse it converting '(' to ')' and ')' to '('
// then apply the infix-to-postfix algorithm
string infixtoPrefix(string s) {
    reverse(s.begin(), s.end());
    stack<char> st;
    string res;
    for (int i = 0; i < s.length(); i++) {
        if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {
            res += s[i];
        }
        else if (s[i] == ')') st.push(s[i]);
        else if (s[i] == '(') {
            while (!st.empty() && st.top() != ')') {
                res += st.top();
                st.pop();
            }
            if (!st.empty()) st.pop();
        }
        else {
            while (!st.empty() && prec(st.top()) > prec(s[i])) {
                res += st.top();
                st.pop();
            }
            st.push(s[i]);
        }
    }
    while (!st.empty()) {
        res += st.top();
        st.pop();
    }
    reverse(res.begin(), res.end());
    return res;
}

//Balanced Parantheses
bool isValid(string s) {
    int n = s.size();
    stack<char> st;
    bool ans = true;
    for (int i = 0; i < n; i++) {
        if (s[i] == '(' || s[i] == '{' || s[i] == '[') {
            st.push(s[i]);
        }
        else if (s[i] == ')') {
            if (!st.empty() && st.top() == '(') st.pop();
            else {
                ans = false;
                break;
            }
        }
        else if (s[i] == ']') {
            if (!st.empty() && st.top() == '[') st.pop();
            else {
                ans = false;
                break;
            }
        }
        else if (s[i] == '}') {
            if (!st.empty() && st.top() == '{') st.pop();
            else {
                ans = false;
                break;
            }
        }
    }
    if (!st.empty()) return false;
    return ans;
}
