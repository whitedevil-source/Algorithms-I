int getBit(int n, int pos) {
    return ((n & (1 << pos)) != 0);
}
int setbit(int n, int pos) {
    return (n | (1 << pos));
}
int clearbit(int n, int pos) {
    int mask = ~(1 << pos);
    return (n & mask);
}
//update is clear and then set
int updatebit(int n, int pos, int value) {
    int mask = ~(1 << pos);
    n = n & mask;
    return (n | (value << pos));
}

//Program to check if number is power of 2
//Algo: (n and n-1 has same as n except the rightmost bit
bool ispowerof2(int n) {
    return (n && !(n & n - 1));
}

//program to count the number of ones in binary representation
int numberofones(int n) {
    int count = 0;
    while (n) {
        n = n & (n - 1);
        count++;
    }
    return count;
}

//program to generate all subsets of a set
void subsets(int arr[], int n) {
    for (int i = 0; i < (1 << n); i++) {
        for (int j = 0; j < n; j++) {
            if (i & (1 << j)) {
                cout << arr[j] << " ";
            }
            cout << endl;
        }
    }
}

//program to find a unique number in an array where all numbers except one
//are present twice
// TRICK: XOR of number with itself gives zero
int unique1(int arr[], int n) {
    int xorsum = 0;
    for (int i = 0; i < n; i++) {
        xorsum = xorsum ^ arr[i];
    }
    return xorsum;
}

//same question but here we have 2 unique numbers
int setBit(int n, int pos) {
    return((n & (1 << pos)) != 0);
}
void unique2(int arr[], int n) {
    int xorsum = 0;
    for (int i = 0; i < n; i++) {
        xorsum = xorsum ^ arr[i];
    }
    int tempxor = xorsum;
    int setbit = 0;
    int pos = 0;
    while (setbit != 1) {
        setbit = xorsum & 1;
        pos++;
        xorsum = xorsum >> 1;
    }
    int newxor = 0;
    for (int i = 0; i < n; i++) {
        if (setBit(arr[i], pos - 1)) {
            newxor = newxor ^ arr[i];
        }
    }
    cout << newxor << endl;
    cout << (tempxor ^ newxor) << endl;
 }

//find unique number where all numbers except one are present thrice
int unique3(int arr[], int n) {
    int result = 0;
    for (int i = 0; i < 64; i++) {
        int sum = 0;
        for (int j = 0; j < n; j++) {
            if (getBit(arr[j], i)) {
                sum++;
            }
        }
        if (sum % 3 == 0) {
            result = setbit(result, i);
        }
    }
}

