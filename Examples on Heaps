//HEAPS
/* similar to binary tree
* Max Heap: root > rest of elements in its subtree
* Min Heap: root < rest of elements in its subtree
*/

//HeapSort
void heapify(vi& a, int n, int i) {
    int maxIdx = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;

    if (l<n && a[l]>a[maxIdx]) maxIdx = l;
    if (r<n && a[r]>a[maxIdx]) maxIdx = r;

    if (maxIdx != i) {
        swap(a[i], a[maxIdx]);
        heapify(a, n, maxIdx);
    }
}
void heapsort(vi& a) {
    int n = a.size();

    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(a, n, i);
    }
    for (int i = n - 1; i > 0; i--) {
        swap(a[0], a[i]);
        heapify(a, i, 0);
    }

}

//Median of Running stream
/* Approach:
* 1. Keep one maxHeap and one minHeap
* 2. Partition the array into two parts
* 3. If sizes of maxHeap & minHeap not equal then answer is top of larger size heap
*    else avg of top of both heaps
*/

priority_queue<int, vi, greater<int>> pqmin;
priority_queue<int, vi> pqmax;
void insert(int x) {
    if (pqmin.size() == pqmax.size()) {
        if (pqmax.size() == 0) {
            pqmax.push(x);
            return;
        }
        if (x < pqmax.top()) pqmax.push(x);
        else pqmin.push(x);
    }
    else {
        // two cases possible
        // case 1: size of maxheap > size of minheap
        // case 2: size of minheap > size of maxheap
        if (pqmax.size() > pqmin.size()) {
            if (x >= pqmax.top()) pqmin.push(x);
            else {
                int temp = pqmax.top();
                pqmax.pop();
                pqmin.push(temp);
                pqmax.push(x);
            }
        }
        else {
            if (x <= pqmin.top()) pqmax.push(x);
            else {
                int temp = pqmin.top();
                pqmin.pop();
                pqmax.push(temp);
                pqmin.push(x);
            }
        }
    }
}

double findMedian() {
    if (pqmin.size() == pqmax.size()) {
        return (pqmin.top() + pqmax.top()) / 2;
    }
    else if (pqmax.size() > pqmin.size()) {
        return pqmax.top();
    }
    else {
        return pqmin.top();
    }
}

//Merge K sorted arrays into single sorted array
/* efficient solution {using heaps}
* Create a mini heap of pairs (Pair->{value,array number})
* Insert {first element, array number} of all sorted array into MinHeap
* Main idea: we will pop element from the minheap and store into the answer array
* Insert the next element of the sorted array into the minheap
* We also need to keep track of the indices of the elements
*/
